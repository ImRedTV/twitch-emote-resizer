{"version":3,"sources":["components/Button.js","components/ProgressBar.js","components/ToggleSwitch.js","moon.svg","components/TwitchPreview.js","components/DropZone.js","info.svg","twitch-emote-resizer.svg","github.svg","App.js","reportWebVitals.js","index.js"],"names":["Button","clickHandler","children","className","onClick","ProgressBar","progress","style","width","ToggleSwitch","initialState","onToggle","useState","state","setState","TwitchPreview","emoteDataUrl","badgeDataUrl","light","setLight","src","moon","dark","estimateCanvasFileSize","canvas","Math","round","toDataURL","length","bytesToKilobytes","bytes","toFixed","DropZone","draggingFile","setDraggingFile","setProgress","loadingText","setLoadingText","sourceImageUrl","setSourceImageUrl","fileName","setFileName","emotePreviewDataUrl","setEmotePreviewDataUrl","badgePreviewDataUrl","setBadgePreviewDataUrl","fileInputRef","useRef","sourceImageRef","sourceImageCanvasRef","canvasRefs","resized28Ref","push","resized56Ref","resized112Ref","resized18Ref","resized36Ref","resized72Ref","handleSaveImage","canvasRef","current","toBlob","blob","saveAs","onDrop","e","preventDefault","stopPropagation","dataTransfer","files","name","split","URL","createObjectURL","onDragEnter","onDragLeave","onDragOver","ref","onLoad","naturalWidth","naturalHeight","maxSideLength","max","height","sourceImageCanvasContext","getContext","widthOffset","heightOffset","drawImage","resized","withinSize","pica","Pica","resize","quality","alpha","then","compressionPass","tryCompressionPass","colorsPower","ctx","resizedPointContainer","iq","PointContainer","fromHTMLCanvasElement","colors","pow","palette","imageData","createImageData","data","set","toUint8Array","putImageData","alt","id","type","accept","display","onChange","target","click","cursor","zip","JSZip","file","Object","keys","generateAsync","zipData","App","icon","info","window","location","href","github","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cbcf42c.chunk.js","sourcesContent":["import './Button.css';\r\n\r\nfunction Button({clickHandler, children}) {\r\n  return (\r\n    <div className=\"Button\" onClick={clickHandler}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import './ProgressBar.css';\r\n\r\nfunction ProgressBar({progress}) {\r\n  return (\r\n    <div className='ProgressBar'>\r\n      <div className='ProgressBarInner' style={{ width: `${progress}%` }}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;\r\n","import \"./ToggleSwitch.css\";\r\nimport {useState} from \"react\";\r\n\r\nfunction ToggleSwitch({ initialState, onToggle }) {\r\n  let [state, setState] = useState(initialState);\r\n\r\n  let onClick = () => {\r\n    setState(!state);\r\n    onToggle(!state);\r\n  };\r\n\r\n  return (\r\n    <div className={'ToggleSwitch' + (state ? ' On' : '')} onClick={onClick}>\r\n      <div className={'Inner'} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToggleSwitch;\r\n","export default __webpack_public_path__ + \"static/media/moon.a82cae44.svg\";","import \"./TwitchPreview.css\";\r\nimport {useState} from \"react\";\r\nimport ToggleSwitch from \"./ToggleSwitch\";\r\nimport moon from \"../moon.svg\";\r\n\r\nfunction TwitchPreview({ emoteDataUrl, badgeDataUrl }) {\r\n  let [light, setLight] = useState(false);\r\n\r\n  return (\r\n    <div className={\"TwitchPreview\" + (light ? \" Light\" : \"\")}>\r\n      <div className={\"ChatMessage\"}>\r\n        <img className={\"BadgePreview\"} src={badgeDataUrl} />\r\n        <span><span className=\"Username\">tee_maw</span>: </span>\r\n        <img className={\"EmotePreview\"} src={emoteDataUrl} />\r\n      </div>\r\n      <div className={\"DarkToggle\"}>\r\n        <img src={moon} className={\"MoonIcon\" + (light ? \" Light\" : \"\")} />\r\n        <ToggleSwitch initialState={!light} onToggle={(dark) => setLight(!dark)}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TwitchPreview;\r\n","import './DropZone.css';\r\nimport Button from \"./Button\";\r\nimport {useRef, useState} from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport Pica from 'pica';\r\nimport * as iq from 'image-q';\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from 'file-saver';\r\nimport TwitchPreview from \"./TwitchPreview\";\r\n\r\nfunction DropZone() {\r\n  const [draggingFile, setDraggingFile] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [loadingText, setLoadingText] = useState('');\r\n  const [sourceImageUrl, setSourceImageUrl] = useState('');\r\n  const [fileName, setFileName] = useState('');\r\n  const [emotePreviewDataUrl, setEmotePreviewDataUrl] = useState('')\r\n  const [badgePreviewDataUrl, setBadgePreviewDataUrl] = useState('');\r\n\r\n  const fileInputRef = useRef(null);\r\n  const sourceImageRef = useRef(null);\r\n  const sourceImageCanvasRef = useRef(null);\r\n\r\n  const canvasRefs = [];\r\n  const resized28Ref = useRef(null);\r\n  canvasRefs.push(resized28Ref);\r\n  const resized56Ref = useRef(null);\r\n  canvasRefs.push(resized56Ref);\r\n  const resized112Ref = useRef(null);\r\n  canvasRefs.push(resized112Ref);\r\n  const resized18Ref = useRef(null);\r\n  canvasRefs.push(resized18Ref);\r\n  const resized36Ref = useRef(null);\r\n  canvasRefs.push(resized36Ref);\r\n  const resized72Ref = useRef(null);\r\n  canvasRefs.push(resized72Ref);\r\n\r\n  const handleChangeFile = e => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.target.files[0]) {\r\n      setFileName(e.target.files[0].name.split('.')[0]);\r\n      setSourceImageUrl(URL.createObjectURL(e.target.files[0]));\r\n      setProgress(1);\r\n      setLoadingText('Loading image...');\r\n    }\r\n  };\r\n  const handleClickChooseFile = e => {\r\n    fileInputRef.current.click();\r\n  };\r\n  const handleDragEnter = e => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDraggingFile(true);\r\n  };\r\n  const handleDragLeave = e => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDraggingFile(false);\r\n  };\r\n  const handleDragOver = e => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n  const handleDrop = e => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDraggingFile(false);\r\n    if (e.dataTransfer.files[0]) {\r\n      setFileName(e.dataTransfer.files[0].name.split('.')[0]);\r\n      setSourceImageUrl(URL.createObjectURL(e.dataTransfer.files[0]));\r\n      setProgress(1);\r\n      setLoadingText('Loading image...');\r\n    }\r\n  };\r\n  const handleImageLoad = e => {\r\n    // Preserve aspect ratio\r\n    let naturalWidth = sourceImageRef.current.naturalWidth;\r\n    let naturalHeight = sourceImageRef.current.naturalHeight;\r\n    let maxSideLength = Math.max(naturalWidth, naturalHeight);\r\n    sourceImageCanvasRef.current.width = maxSideLength;\r\n    sourceImageCanvasRef.current.height = maxSideLength;\r\n    let sourceImageCanvasContext = sourceImageCanvasRef.current.getContext('2d');\r\n    let widthOffset = Math.round((maxSideLength - naturalWidth) / 2);\r\n    let heightOffset = Math.round((maxSideLength - naturalHeight) / 2);\r\n    sourceImageCanvasContext.drawImage(sourceImageRef.current, widthOffset, heightOffset);\r\n    // Resize\r\n    let resized = 0;\r\n    let withinSize = 0;\r\n    setProgress(10);\r\n    setLoadingText(`Resizing image... (${resized}/${canvasRefs.length})`);\r\n    const pica = new Pica();\r\n    for (let canvasRef of canvasRefs) {\r\n      pica.resize(sourceImageCanvasRef.current, canvasRef.current, {\r\n        quality: 3,\r\n        alpha: true,\r\n      }).then(() => {\r\n        resized += 1;\r\n        setProgress(10 + ((resized / canvasRefs.length) * 70) + ((withinSize / canvasRefs.length) * 20));\r\n        setLoadingText(`Resizing image... (${resized}/${canvasRefs.length})`);\r\n\r\n        let compressionPass = 0;\r\n        let colorsPower = 15\r\n\r\n        function tryCompressionPass(canvasRef, colorsPower) {\r\n          setLoadingText(`Compressing image... (Pass ${++compressionPass})`);\r\n          let ctx = canvasRef.current.getContext('2d');\r\n          let resizedPointContainer = iq.utils.PointContainer.fromHTMLCanvasElement(canvasRef.current);\r\n          iq.buildPalette([resizedPointContainer], { colors: Math.pow(2, colorsPower) }).then(palette => {\r\n            let imageData = ctx.createImageData(canvasRef.current.width, canvasRef.current.height);\r\n            imageData.data.set(iq.applyPaletteSync(resizedPointContainer, palette).toUint8Array());\r\n            ctx.putImageData(imageData, 0, 0);\r\n          }).then(() => {\r\n            if (estimateCanvasFileSize(canvasRef.current) > 25000 && colorsPower > 0) {\r\n              tryCompressionPass(canvasRef, colorsPower - 1);\r\n            }\r\n            else {\r\n              withinSize += 1;\r\n              setProgress(10 + ((resized / canvasRefs.length) * 70) + ((withinSize / canvasRefs.length) * 20));\r\n            }\r\n          });\r\n        }\r\n\r\n        if (estimateCanvasFileSize(canvasRef.current) > 25000) {\r\n          tryCompressionPass(canvasRef, colorsPower);\r\n        }\r\n        else {\r\n          withinSize += 1;\r\n          setProgress(10 + ((resized / canvasRefs.length) * 70) + ((withinSize / canvasRefs.length) * 20));\r\n          if (canvasRef.current.width === 112) {\r\n            setEmotePreviewDataUrl(canvasRef.current.toDataURL());\r\n          }\r\n          else if (canvasRef.current.width === 72) {\r\n            setBadgePreviewDataUrl(canvasRef.current.toDataURL());\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const handleSaveAll = e => {\r\n    let zip = new JSZip();\r\n    for (let canvasRef of canvasRefs) {\r\n      canvasRef.current.toBlob(blob => {\r\n        zip.file(`${fileName}@${canvasRef.current.width}.png`, blob);\r\n        if (Object.keys(zip.files).length === canvasRefs.length) {\r\n          zip.generateAsync({ type: 'blob' }).then(zipData => {\r\n            saveAs(zipData, `${fileName}.zip`);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const handleSaveImage = canvasRef => {\r\n    canvasRef.current.toBlob(blob => {\r\n      saveAs(blob, `${fileName}@${canvasRef.current.width}.png`);\r\n    });\r\n  };\r\n  return (\r\n    <div className={\r\n      'DropZone' + (draggingFile ? ' Dragging' : '')\r\n      + (progress > 0 && progress < 100 ? ' Loading' : '')\r\n      + (progress === 100 ? ' Done' : '')\r\n    }\r\n         onDrop={handleDrop}\r\n         onDragEnter={handleDragEnter}\r\n         onDragLeave={handleDragLeave}\r\n         onDragOver={handleDragOver}\r\n    >\r\n      <img className=\"SourceImage\" src={sourceImageUrl} ref={sourceImageRef} onLoad={handleImageLoad} alt=\"Source\"/>\r\n      <canvas className=\"SourceImage\" ref={sourceImageCanvasRef}/>\r\n      <input id=\"ImageInput\"\r\n             type=\"file\"\r\n             accept=\"image/*\"\r\n             ref={fileInputRef}\r\n             style={{display: 'none'}}\r\n             onChange={handleChangeFile}\r\n      />\r\n      <div className=\"DropCallToAction\">\r\n        <h2>Drop your image here or </h2>\r\n        <Button clickHandler={handleClickChooseFile}>Choose file</Button>\r\n      </div>\r\n      <div className=\"LoadingContainer\">\r\n        <h4>{loadingText}</h4>\r\n        <ProgressBar progress={progress} />\r\n      </div>\r\n      <div className=\"ResizedContainer\">\r\n        <TwitchPreview emoteDataUrl={emotePreviewDataUrl} badgeDataUrl={badgePreviewDataUrl} />\r\n        <div className=\"ResizedRow\">\r\n          <div onClick={() => handleSaveImage(resized112Ref)} style={{ cursor: 'pointer' }}>\r\n            <canvas className=\"ResizedCanvas By112\" width=\"112\" height=\"112\" ref={resized112Ref}/>\r\n            <div className=\"ImageSize\">112x112 ({bytesToKilobytes(estimateCanvasFileSize(resized112Ref.current))}KB)</div>\r\n          </div>\r\n          <div onClick={() => handleSaveImage(resized56Ref)} style={{ cursor: 'pointer' }}>\r\n            <canvas className=\"ResizedCanvas By56\" width=\"56\" height=\"56\" ref={resized56Ref}/>\r\n            <div className=\"ImageSize\">56x56 ({bytesToKilobytes(estimateCanvasFileSize(resized56Ref.current))}KB)</div>\r\n          </div>\r\n          <div onClick={() => handleSaveImage(resized28Ref)} style={{ cursor: 'pointer' }}>\r\n            <canvas className=\"ResizedCanvas By28\" width=\"28\" height=\"28\" ref={resized28Ref}/>\r\n            <div className=\"ImageSize\">28x28 ({bytesToKilobytes(estimateCanvasFileSize(resized28Ref.current))}KB)</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"ResizedRow\">\r\n          <div onClick={() => handleSaveImage(resized72Ref)} style={{ cursor: 'pointer' }}>\r\n            <canvas className=\"ResizedCanvas By72\" width=\"72\" height=\"72\" ref={resized72Ref}/>\r\n            <div className=\"ImageSize\">72x72 ({bytesToKilobytes(estimateCanvasFileSize(resized72Ref.current))}KB)</div>\r\n          </div>\r\n          <div onClick={() => handleSaveImage(resized36Ref)} style={{ cursor: 'pointer' }}>\r\n            <canvas className=\"ResizedCanvas By36\" width=\"36\" height=\"36\" ref={resized36Ref}/>\r\n            <div className=\"ImageSize\">36x36 ({bytesToKilobytes(estimateCanvasFileSize(resized36Ref.current))}KB)</div>\r\n          </div>\r\n          <div onClick={() => handleSaveImage(resized18Ref)} style={{ cursor: 'pointer' }}>\r\n            <canvas className=\"ResizedCanvas By18\" width=\"18\" height=\"18\" ref={resized18Ref}/>\r\n            <div className=\"ImageSize\">18x18 ({bytesToKilobytes(estimateCanvasFileSize(resized18Ref.current))}KB)</div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <p>Click an image to save it or</p>\r\n          <Button clickHandler={handleSaveAll}>Save all (.zip)</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction estimateCanvasFileSize(canvas) {\r\n  if (canvas === null) {\r\n    return 0;\r\n  }\r\n  const imageDataHeader = 'data:image/png;base64,';\r\n  return Math.round((canvas.toDataURL('image/png').length - imageDataHeader.length) * (3/4));\r\n}\r\n\r\nfunction bytesToKilobytes(bytes) {\r\n  return (bytes / 1024).toFixed(2);\r\n}\r\n\r\nexport default DropZone;\r\n","export default __webpack_public_path__ + \"static/media/info.ebce7ea8.svg\";","export default __webpack_public_path__ + \"static/media/twitch-emote-resizer.a6e15172.svg\";","export default __webpack_public_path__ + \"static/media/github.16a9304e.svg\";","import './App.css';\r\nimport DropZone from './components/DropZone';\r\nimport info from './info.svg';\r\nimport icon from './twitch-emote-resizer.svg';\r\nimport github from './github.svg';\r\n\r\nfunction App() {\r\n  const handleViewOnGithub = () => {\r\n    window.location.href = \"https://github.com/tma02/twitch-emote-resizer\";\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"TitleRow\">\r\n        <img className=\"Icon\" src={icon}/>\r\n        <div className=\"Title\">Twitch Emote Resizer</div>\r\n      </div>\r\n      <DropZone />\r\n      <div className=\"Info\">\r\n        <img src={info} className=\"InfoIcon\" alt=\"info icon\" />\r\n        <p>\r\n          This site will resize an image into the sizes Twitch requires for emotes and badges.\r\n          <br/>\r\n          If the resized image exceeds Twitch's size limit of 25KB, this site will attempt to compress it.\r\n          <br/>\r\n          Image processing is done in your browser. Your image never leaves your device.\r\n        </p>\r\n      </div>\r\n      <div className=\"GitHub\" onClick={handleViewOnGithub}>\r\n        <img src={github} className=\"GitHubIcon\" alt=\"GitHub icon\"/>\r\n        View on GitHub\r\n      </div>\r\n      <div className=\"Spacer\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}